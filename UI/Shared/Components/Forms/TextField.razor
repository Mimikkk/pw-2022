<label for="@Name" class="@Cx("group", Optional ? "optional" : null)">
  @if (Icon is not null) {
    <Icon Type="@Icon" Size="Size.Sm" Interactive Class="cursor-pointer"/>
    <Typography>|</Typography>
  }
  <div class="relative w-full">
    @if (Lines is null) {
      <input required="@Required" type="text" disabled="@Disabled" value="@value" id="@Name" class="px-2 rounded w-full outline-none" placeholder=" " @onchange="HandleChange"/>
    } else {
      <textarea rows="@Lines" required="@Required" type="text" disabled="@Disabled" value="@value" id="@Name" class="px-2 rounded w-full outline-none" placeholder=" " @onchange="HandleChange"></textarea>
    }
    @if (Label is not null) {
      <label for="@Name" class="label">@Label</label>
    }
  </div>
  @if (value is not "" && !Disabled) {
    <Icon Type="IconType.X" Size="Size.Sm" Interactive OnClick="HandleClear"/>
  }
</label>

@code {
  [Parameter]
  public string Name { get; set; } = CreateStr();

  [Parameter]
  public bool Disabled { get; set; }

  [Parameter]
  public string? Value { get; set; }

  [Parameter]
  public string? Label { get; set; }

  [Parameter]
  public bool Required { get; set; }

  [Parameter]
  public bool Optional { get; set; }

  [Parameter]
  public IconType? Icon { get; set; }

  [Parameter]
  public Action<string> OnChange { get; set; } = _ => { };

  [Parameter]
  public int? Lines { get; set; }

  protected override void OnInitialized() =>
    value = Value ?? string.Empty;

  private void HandleClear() =>
    OnChange(value = string.Empty);

  private void HandleChange(ChangeEventArgs args) {
    if (Disabled) return;
    OnChange(value = args.Value as string ?? string.Empty);
  }

  private string value = string.Empty;
}
