<label for="@Name" class="group">
  @if (Icon is not null) {
    <Icon Type="@Icon" Size="Size.Sm" Interactive Class="cursor-pointer"/>
    <Typography>|</Typography>
  }
  <div class="relative w-full">
    <select value="@value" id="@Name" class="px-2 rounded w-full outline-none cursor-pointer" placeholder=" " @onchange="@HandleChange">
      <option value="@EmptyValue" hidden>n/d</option>
      @ChildContent
    </select>
    @if (Label is not EmptyValue) {
      <label for="@Name" class="label">@Label</label>
    }
  </div>
  @if (value is not EmptyValue) {
    <Icon Type="IconType.X" Size="Size.Sm" Interactive OnClick="HandleClear"></Icon>
  }
</label>

@code {
  [Parameter]
  public string Name { get; set; } = Guid.NewGuid().ToString("n")[..8];

  [Parameter]
  public string? Value { get; set; }

  [Parameter]
  public string? Label { get; set; }

  [Parameter]
  public IconType? Icon { get; set; }

  [Parameter]
  public RenderFragment? ChildContent { get; set; }

  [Parameter]
  public Action<string?> OnChange { get; set; } = _ => { };

  protected override void OnInitialized() =>
    value = Value ?? EmptyValue;

  private void HandleChange(ChangeEventArgs args) =>
    OnChange(value = args.Value as string);

  private void HandleClear() {
    value = EmptyValue;
    OnChange(null);
  }

  private string? value = EmptyValue;
    private const string EmptyValue = "empty";
}
