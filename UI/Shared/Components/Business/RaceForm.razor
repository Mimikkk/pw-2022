@inject IToastService ToastService
@inject IJSRuntime JS
@using Microsoft.AspNetCore.Components.Web.Infrastructure
@using Services.Races
@using Services.Toasts
@using DataModels.Races
@inject IRaceService RaceService

<form id="race-form" class="flex flex-col gap-2">
  <div class="flex gap-2 justify-center">
    <div class="w-24 h-24 flex items-center justify-center">
      <Card Color="Color.Secondary" Shade="5">
        <Icon Type="IconType.Person" Size="Size.Lg"/>
      </Card>
    </div>
    <div class="flex flex-col w-full gap-2">
      <TextField Required Value="@_name()" OnChange="_changeName" Label="Nazwa"/>
      <TextField Optional Lines="4" Value="@_name()" OnChange="_changeName" Label="Opis"/>
    </div>
  </div>
  <Divider/>
  <SelectField Required Icon="IconType.Moon" Label="wymogi" Value="@_needs()" OnChange="_selectNeeds">
    <option value="low">Niskie</option>
    <option value="medium">Średnie</option>
    <option value="high">Wysokie</option>
  </SelectField>
  <SelectField Required Icon="IconType.Money" Label="dekadencja" Value="@_decadency()" OnChange="_selectDecadency">
    <option value="low">Niska</option>
    <option value="medium">Średnia</option>
    <option value="high">Wysoka</option>
  </SelectField>
  <SelectField Required Icon="IconType.Hat" Label="oporność" Value="@_will()" OnChange="_selectWill">
    <option value="low">Niska</option>
    <option value="medium">Średnia</option>
    <option value="high">Wysoka</option>
  </SelectField>
</form>

@code {
  [Parameter]
  public RaceResource? Initial { get; set; }

#pragma warning disable CS4014
  public async Task OnSubmit() {
    reportValidity();
    if (!Validate()) return;

    var wasSuccessful = await (Initial is not null
      ? RaceService.Update(Initial.Id, new RaceModel(
        _name(),
        _description(),
        _needs(),
        _decadency(),
        _will()
        ))
      : RaceService.Create(new RaceModel(
        _name(),
        _description(),
        _needs(),
        _decadency(),
        _will()
        )));

    ToastService.AddAsync(
      "Serwis Ras",
      wasSuccessful
        ? Initial is null ? "Utworzono pomyślnie" : "Edycja zakończona pomyślnie"
        : Initial is null ? "Błąd utworzenia" : "Edycja zakończona niepomyślnie",
      wasSuccessful ? "success" : "error"
      );
  }
#pragma warning restore CS4014
  public bool IsValid { get; private set; }
  private bool Validate() => IsValid = _name().Length > 0
                                       && _needs() is not null
                                       && _decadency() is not null
                                       && _will() is not null;

  private Func<string> _name = null!;
  private Action<string> _changeName = null!;
  private Func<string> _description = null!;
  private Action<string> _changeDescription = null!;
  private Func<string?> _needs = null!;
  private Action<string?> _selectNeeds = null!;
  private Func<string?> _decadency = null!;
  private Action<string?> _selectDecadency = null!;
  private Func<string?> _will = null!;
  private Action<string?> _selectWill = null!;

  private async Task reportValidity() =>
    await JS.InvokeVoidAsync("reportValidity", "race-form");

  protected override void OnInitialized() {
    (_name, _changeName) = CreateSignal(this, Initial?.Name ?? string.Empty);
    (_description, _changeDescription) = CreateSignal(this, Initial?.Description ?? string.Empty);
    (_needs, _selectNeeds) = CreateSignal(this, Initial?.Needs.Name ?? default);
    (_decadency, _selectDecadency) = CreateSignal(this, Initial?.Decadency.Name ?? default);
    (_will, _selectWill) = CreateSignal(this, Initial?.Will.Name ?? default);
  }
}
