@page "/races"
@using Services.Toasts
@using Models.Races
@using Services.Races
@using Models.Goods
@inject IToastService ToastService
@inject IRaceService RaceService

<PageTitle>UI | Rasy</PageTitle>

<section class="h-full grid grid-cols-6">
  <div class="@Cx(_gradient, "h-full py-4 px-2 flex flex-col gap-4")">
    <Title>Wyszukiwanie Ras</Title>
    <TextField Icon="IconType.Magnifier" Label="Szukaj..." Value="@_name()" OnChange="_searchName"/>
    <Divider/>
    <SelectField Icon="IconType.Filter" Label="wymogi" Value="@_needs()" OnChange="_filterNeeds">
      <option value="low">Niskie</option>
      <option value="medium">Średnie</option>
      <option value="high">Wysokie</option>
    </SelectField>
    <SelectField Icon="IconType.Filter" Label="dekadencja" Value="@_decadency()" OnChange="_filterDecadency">
      <option value="low">Niska</option>
      <option value="medium">Średnia</option>
      <option value="high">Wysoka</option>
    </SelectField>
    <SelectField Icon="IconType.Filter" Label="oporność" Value="@_will()" OnChange="_filterWill">
      <option value="low">Niska</option>
      <option value="medium">Średnia</option>
      <option value="high">Wysoka</option>
    </SelectField>
  </div>
  <div class="h-full px-48 py-8 col-span-5 flex flex-col gap-2">
    @if (Items is null) {
      <LoadingBarrier/>
    } else {
      <Card Color="Color.Secondary" Class="p-4 h-[800px] content-baseline grid grid-cols-3 gap-x-4 gap-y-2 py-4 px-2 h-full overflow-y-auto">
        @foreach (var race in Items) {
          <div class="col-span-3 grid grid-cols-2 gap-2">
            <RaceCard Race="@race" OnEdit="() => ToggleEditModal(race)" OnRemove="() => ToggleRemoveModal(race)"/>
            <div>
              <Title>Produkty</Title>
              <div class="pb-2 flex flex-col gap-1 h-[300px] rounded overflow-y-auto">
                @foreach (var good in race.Products) {
                  <Card>
                    <CardHeader>
                      <NavLink href="@_goodHref(good)">
                        <Icon Type="IconType.RightChevronDouble" Size="Size.Sm" Interactive>
                          <Typography Bold>
                            Więcej informacji
                          </Typography>
                        </Icon>
                      </NavLink>
                      <Title>
                        @good.Name
                      </Title>
                    </CardHeader>
                    <div class="flex gap-2">
                      <Card Color="Color.Secondary" Shade="5">

                        <Icon Type="IconType.Sun"/>
                      </Card>
                      <Typography OverflowLines="2" Overflow>
                        @good.Description
                      </Typography>
                    </div>
                  </Card>
                }
              </div>
            </div>
          </div>
        }
      </Card>
    }
    <div class="mt-auto flex gap-2 justify-center items-center p-2">
      <Icon Class="m-auto" Type="IconType.DownChevron" Color="Color.Secondary" Interactive/>
      <Button Class="place-self-end w-48" OnClick="() => _toggleFormModal(true)">Dodaj</Button>
    </div>
  </div>
</section>
<RaceModal Initial="@Selected" IsOpen="_isFormModalVisible()" OnClose="() => _toggleFormModal(false)" OnConfirm="() => _toggleFormModal(false)"/>
<ConfirmModal IsOpen="@_isRemoveModalVisible()" OnCancel="() => _toggleRemoveModal(false)" OnConfirm="HandleRemove">
  Czy na pewno chcesz usunąć rasę <strong>@_name()</strong>?
</ConfirmModal>

@code {
  private async Task HandleRemove() {
    if (Selected is null) return;
    var result = await RaceService.Remove(Selected.Id);

    ToastService.AddAsync(
      "Serwis ras",
      result ? "Pomyślnie usunięto" : "Usuwanie nie powiodło się",
      result ? "success" : "error"
      );
    _toggleRemoveModal(false);
  }


  protected override void OnInitialized() {
    (_name, _searchName) = CreateSignal<string?>(this);
    (_needs, _filterNeeds) = CreateSignal<string?>(this);
    (_decadency, _filterDecadency) = CreateSignal<string?>(this);
    (_will, _filterWill) = CreateSignal<string?>(this);
    (_isFormModalVisible, _toggleFormModal) = CreateToggle(this);
    (_isRemoveModalVisible, _toggleRemoveModal) = CreateToggle(this);
  }
  protected override async Task OnInitializedAsync() {
    await Search();
  }
  protected override async Task OnAfterRenderAsync(bool firstRender) {
    if (firstRender) return;

    var search = new RaceModel(_name()!, string.Empty, _needs()!, _decadency()!, _will()!);
    if (Previous.Name != search.Name
        || Previous.Decadency != search.Decadency?.Name
        || Previous.Needs != search.Needs?.Name
        || Previous.Will != search.Will?.Name) {
      Items = null;
      StateHasChanged();

      await Search();
      Previous = Previous with {
        Name = search.Name,
        Decadency = search.Decadency?.Name,
        Needs = search.Needs?.Name,
        Will = search.Will?.Name
        };
      StateHasChanged();
    }
    if (_isRemoveModalVisible() != Previous.IsRemoveModalVisible) {
      await Search();
      if (Previous.IsRemoveModalVisible) Selected = null;
      Previous = Previous with {
        IsRemoveModalVisible = _isRemoveModalVisible()
        };

      StateHasChanged();
    }
    if (_isFormModalVisible() != Previous.IsFormModalVisible) {
      await Search();
      if (Previous.IsFormModalVisible) Selected = null;
      Previous = Previous with {
        IsFormModalVisible = _isFormModalVisible()
        };

      StateHasChanged();
    }
  }

  private async Task Search() {
    var response = await RaceService.FilterWithProductsBy(
      _name(), _decadency(), _needs(), _will()
      );
    Items = response.ToList();
  }
  private void ToggleEditModal(RaceResource race) {
    Selected = race;
    _toggleFormModal(true);
  }
  private void ToggleRemoveModal(RaceResourceWithProducts<GoodResource> race) {
    if (race.Products.Count is not 0) {
      ToastService.AddAsync("serwis ras", "Rasa ma produkty!", "warning");
      return;
    }
    Selected = race;
    _toggleRemoveModal(true);
  }

  private static string _goodHref(IGood good) => $"/goods/{good.Name}".Replace(" ", "_");
  private readonly string _gradient = $"bg-gradient-to-r {Color.Primary["from", 3]} {Color.Primary["to", 2]}";
  private List<RaceResourceWithProducts<GoodResource>>? Items { get; set; }
  private Func<string?> _name = null!;
  private Action<string?> _searchName = null!;
  private Func<string?> _needs = null!;
  private Action<string?> _filterNeeds = null!;
  private Func<string?> _decadency = null!;
  private Action<string?> _filterDecadency = null!;
  private Func<string?> _will = null!;
  private Action<string?> _filterWill = null!;
  private Func<bool> _isFormModalVisible = null!;
  private Action<bool?> _toggleFormModal = null!;
  private Func<bool> _isRemoveModalVisible = null!;
  private Action<bool?> _toggleRemoveModal = null!;
  private PreviousState Previous { get; set; } = new();
  private RaceResource? Selected;
  private sealed record PreviousState(bool IsRemoveModalVisible, bool IsFormModalVisible, string? Name, string? Needs, string? Decadency, string? Will) {
    public PreviousState()
      : this(false, false, null, null, null, null) { }
  }
}
