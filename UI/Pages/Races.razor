@page "/races"
@using UI.Data
@inject ToastService ToastService

<PageTitle>UI | Races</PageTitle>

<section class="h-full grid grid-cols-6">
  <div class="@Cx(_gradient, "h-full py-4 px-2 flex flex-col gap-4")">
    <Title>Wyszukiwanie Ras</Title>
    <TextField Icon="IconType.Magnifier" Label="Szukaj..." Value="@_name()" OnChange="_searchName"/>
    <Divider/>
    <SelectField Icon="IconType.Filter" Label="wymogi" Value="@_needs()" OnChange="_selectNeeds">
      <option value="low">Niskie</option>
      <option value="medium">Średnie</option>
      <option value="high">Wysokie</option>
    </SelectField>
    <SelectField Icon="IconType.Filter" Label="dekadencja" Value="@_decadency()" OnChange="_selectDecadency">
      <option value="low">Niska</option>
      <option value="medium">Średnia</option>
      <option value="high">Wysoka</option>
    </SelectField>
    <SelectField Icon="IconType.Filter" Label="oporność" Value="@_will()" OnChange="_selectWill">
      <option value="low">Niska</option>
      <option value="medium">Średnia</option>
      <option value="high">Wysoka</option>
    </SelectField>
  </div>
  <div class="h-full px-48 py-8 col-span-5 flex flex-col gap-2">
    <Button OnClickAsync="HandleSubmit">231</Button>
    <Card Color="Color.Secondary" Class="p-4 h-[800px] content-baseline grid grid-cols-3 gap-x-4 gap-y-2 py-4 px-2 h-full overflow-y-auto">
      @foreach (var item in Items) {
        <div class="col-span-3 grid grid-cols-4 gap-2">
          <RaceCard Class="col-span-2"/>
          <GoodCard/>
          <GoodCard/>
        </div>
      }
    </Card>
    <div class="mt-auto flex gap-2 justify-center items-center p-2">
      <Icon Class="m-auto" Type="IconType.DownChevron" Color="Color.Secondary" Interactive/>
      <Button Class="place-self-end w-48" OnClick="() => _toggleModal(true)">Dodaj</Button>
    </div>
  </div>
</section>
<Modal Class="w-[600px]" IsOpen="@_isModalVisible()">
  <ModalHeader OnClose="() => _toggleModal(false)">
    <Title>
      Rasa - @_name() - @(_isEdit ? "Edycja" : "Dodawanie")
    </Title>
  </ModalHeader>
  <ModalActions>
    <Button OnClickAsync="HandleSubmit">
      @(_isEdit ? "Edytuj" : "Dodaj")
    </Button>
  </ModalActions>
</Modal>


@code {
  private bool _isFormDirty = false;
  private async Task HandleSubmit() {
    _toggleModal(false);
    await ToastService.AddAsync(
      message: "Hello I am a success toast!",
      type: "success"
      );
  }

  private List<object> Items => new() {
    new { },
    new { },
    new { },
    new { },
    new { },
    new { },
    new { },
    new { },
    new { },
    new { },
    new { },
  };
  private Func<string> _name = null!;
  private Action<string> _searchName = null!;
  private Func<string?> _needs = null!;
  private Action<string?> _selectNeeds = null!;
  private Func<string?> _decadency = null!;
  private Action<string?> _selectDecadency = null!;
  private Func<string?> _will = null!;
  private Action<string?> _selectWill = null!;
  private Func<bool> _isModalVisible = null!;
  private Action<bool?> _toggleModal = null!;
  private bool _isEdit = false;
  protected override void OnInitialized() {
    (_name, _searchName) = CreateSignal<string>(this);
    (_needs, _selectNeeds) = CreateSignal<string?>(this);
    (_decadency, _selectDecadency) = CreateSignal<string?>(this);
    (_will, _selectWill) = CreateSignal<string?>(this);
    (_isModalVisible, _toggleModal) = CreateToggle(this);
  }

  private readonly string _gradient = $"bg-gradient-to-r {Color.Primary["from", 3]} {Color.Primary["to", 2]}";
}
