@page "/races"
@using UI.Data
@inject ToastService ToastService

<PageTitle>UI | Races</PageTitle>

<section class="h-full grid grid-cols-6">
  <div class="@Cx(_gradient, "h-full py-4 px-2 flex flex-col gap-4")">
    <Title>Wyszukiwanie Ras</Title>
    <TextField Icon="IconType.Magnifier" Label="Szukaj..." Value="@_name()" OnChange="_searchName"/>
    <Divider/>
    <SelectField Icon="IconType.Filter" Label="wymogi" Value="@_needs()" OnChange="_filterNeeds">
      <option value="low">Niskie</option>
      <option value="medium">Średnie</option>
      <option value="high">Wysokie</option>
    </SelectField>
    <SelectField Icon="IconType.Filter" Label="dekadencja" Value="@_decadency()" OnChange="_filterDecadency">
      <option value="low">Niska</option>
      <option value="medium">Średnia</option>
      <option value="high">Wysoka</option>
    </SelectField>
    <SelectField Icon="IconType.Filter" Label="oporność" Value="@_will()" OnChange="_filterWill">
      <option value="low">Niska</option>
      <option value="medium">Średnia</option>
      <option value="high">Wysoka</option>
    </SelectField>
  </div>
  <div class="h-full px-48 py-8 col-span-5 flex flex-col gap-2">
    <Card Color="Color.Secondary" Class="p-4 h-[800px] content-baseline grid grid-cols-3 gap-x-4 gap-y-2 py-4 px-2 h-full overflow-y-auto">
      @foreach (var item in Items) {
        <div class="col-span-3 grid grid-cols-4 gap-2">
          <RaceCard OnEdit="ToggleEditModal" OnRemove="() => _toggleDeleteModal(true)" Class="col-span-2"/>
          <GoodCard/>
          <GoodCard/>
        </div>
      }
    </Card>
    <div class="mt-auto flex gap-2 justify-center items-center p-2">
      <Icon Class="m-auto" Type="IconType.DownChevron" Color="Color.Secondary" Interactive/>
      <Button Class="place-self-end w-48" OnClick="() => _toggleFormModal(true)">Dodaj</Button>
    </div>
  </div>
</section>
<Modal Class="w-[600px]" IsOpen="@_isFormModalVisible()">
  <ModalHeader OnClose="() => _toggleFormModal(false)">
    <Title>
      @(_isEdit ? $"Edycja rasy {_name()}" : "Dodawanie nowej rasy")
    </Title>
  </ModalHeader>
  <RaceForm Initial="@Initial"/>
  <ModalActions>
    <Button Type="submit" Form="race-form">
      @(_isEdit ? "Edytuj" : "Dodaj")
    </Button>
  </ModalActions>
</Modal>
<ConfirmModal IsOpen="@_isDeleteModalVisible()" OnCancel="() => _toggleDeleteModal(false)" OnConfirm="HandleRemove">
  Czy na pewno chcesz usunąć rasę <strong>@_name()</strong>?
</ConfirmModal>


@code {
#pragma warning disable CS4014
  private async Task HandleRemove() {
    await Task.Delay(500);
    ToastService.AddAsync(
      "Usunięto rasę",
      "success"
      );
    _toggleDeleteModal(false);
  }

  private bool _isFormDirty = false;
  private async Task HandleSubmit() {
    await Task.Delay(500);
    _toggleFormModal(false);
  }
#pragma warning restore CS4014

  private List<object> Items => new() {
    new { },
    new { },
    new { },
    new { },
    new { },
    new { },
    new { },
    new { },
    new { },
    new { },
    new { },
  };
  private Func<string> _name = null!;
  private Action<string> _searchName = null!;
  private Func<string?> _needs = null!;
  private Action<string?> _filterNeeds = null!;
  private Func<string?> _decadency = null!;
  private Action<string?> _filterDecadency = null!;
  private Func<string?> _will = null!;
  private Action<string?> _filterWill = null!;
  private Func<bool> _isFormModalVisible = null!;
  private Action<bool?> _toggleFormModal = null!;
  private Func<bool> _isDeleteModalVisible = null!;
  private Action<bool?> _toggleDeleteModal = null!;
  private bool _isEdit;

  protected override void OnInitialized() {
    (_name, _searchName) = CreateSignal<string>(this);
    (_needs, _filterNeeds) = CreateSignal<string?>(this);
    (_decadency, _filterDecadency) = CreateSignal<string?>(this);
    (_will, _filterWill) = CreateSignal<string?>(this);
    (_isFormModalVisible, _toggleFormModal) = CreateToggle(this);
    (_isDeleteModalVisible, _toggleDeleteModal) = CreateToggle(this);
  }

  private object? Initial =>
    _isEdit ? new {
      Name = _name(),
      Needs = _needs(),
      Decadency = _decadency(),
      Will = _will(),
    } : null;

  private void ToggleEditModal() {
    _searchName("Jaszczurka");
    _filterNeeds("low");
    _filterDecadency("low");
    _filterWill("low");
    _toggleFormModal(true);
    _isEdit = true;
  }
  private readonly string _gradient = $"bg-gradient-to-r {Color.Primary["from", 3]} {Color.Primary["to", 2]}";
}
