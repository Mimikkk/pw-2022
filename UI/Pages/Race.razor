@page "/races/{Name}"
@using Services.Toasts
@using DataModels.Races
@using Services.Races
@using DataModels.Goods
@inject IToastService ToastService
@inject IRaceService RaceService
@inject NavigationManager NavManager


@if (Resource is null) {
  <LoadingBarrier/>
} else {
  <PageTitle>UI | @Resource.Name</PageTitle>

  <div class="flex w-full h-1/2 items-center justify-center">
    <RaceCard Class="w-1/2" Race="Resource" GoBackLink/>
  </div>
}


@code {
  [Parameter, EditorRequired]
  public string Name { get; set; } = null!;

  private RaceResourceWithProducts<GoodResource>? Resource { get; set; }

  protected override async Task OnInitializedAsync() {
    Resource = (await RaceService.FilterWithProductsBy(name: Name.Replace('_', ' '))).LastOrDefault();
    if (Resource is null) NavManager.NavigateTo("404");
  }
}
